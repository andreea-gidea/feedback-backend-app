CREATE TABLE IF NOT EXISTS question_log (
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    project_id bigint,
    question_id bigint,
    question_category_id bigint,
    sending_counter bigint
);

-- CUSTOM INSERT FOR QUESTION LOGS --
/* EXAMPLE

   SELECT question_log_insert(1,2,3);
   SELECT * FROM question_log;

   id | project_id | question_id | question_category_id | sending_counter |
   1  | 1     	   | 2           | 3                    | 1               |
   ...

   SELECT question_log_insert(1,2,3);
   SELECT * FROM question_log;

   id | project_id | question_id | question_category_id | sending_counter |
   1  | 1     	   | 2           | 3                    | 2               |
   ...

   SELECT question_log_insert(3,3,3);
   SELECT * FROM question_log;

   id | project_id | question_id | question_category_id | sending_counter |
   1  | 1     	   | 2           | 3                    | 2               |
   2  | 3     	   | 3           | 3                    | 1               |
   ...
*/

CREATE OR REPLACE FUNCTION question_log_insert(project_id_param bigint, question_id_param bigint, question_category_id_param bigint)
    RETURNS BOOLEAN AS $$
BEGIN
    -- RETURNS FALSE FOR INVALID SET OF INPUT DATA --
    IF NOT EXISTS
        (SELECT * FROM question_log
            WHERE project_id=project_id_param AND question_id=question_id_param AND question_category_id=question_category_id_param) THEN
        RETURN FALSE;
    ELSE
        -- From second call this function will increment the var. sending_counter of the existing row --
        UPDATE question_log
            SET sending_counter = sending_counter + 1
            WHERE project_id=project_id_param AND question_id=question_id_param AND question_category_id=question_category_id_param;
        RETURN TRUE;
    END IF;
END$$ LANGUAGE plpgsql;

-- INITIALIZATION OF EACH QUESTION LOG ON A GIVEN PROJECT --
/* EXAMPLE

   SELECT question_log_by_project_init(1);
   SELECT * FROM question_log;

   id | project_id | question_id | question_category_id | sending_counter |
   1  | 1     	   | 1           | 1                    | 0               |
   2  | 1     	   | 2           | 1                    | 0               |
   3  | 1     	   | 3           | 1                    | 0               |
   4  | 1     	   | 4           | 1                    | 0               |
   5  | 1     	   | 1           | 2                    | 0               |
   ...
   n  | 1     	   | x           | y                    | 0               |
*/
CREATE OR REPLACE FUNCTION question_log_by_project_init(project_id_param bigint)
    RETURNS BOOLEAN AS $$
DECLARE
    f RECORD;
BEGIN

    IF NOT EXISTS
        (SELECT id FROM project WHERE id=project_id_param) THEN RETURN FALSE;
    END IF;

    FOR f IN SELECT id, category_id FROM question LOOP
            INSERT INTO question_log(project_id, question_id, question_category_id, sending_counter) VALUES (project_id_param, f.id, f.category_id, 0);
        END LOOP;

    RETURN TRUE;
END $$ LANGUAGE plpgsql;


CREATE OR REPLACE FUNCTION min_question_log_sendings_by_proj_and_cat(IN project_id_param bigint, IN category_id_param bigint, OUT min_question_log_sendings bigint) RETURNS bigint
    AS $_$ SELECT MIN(sending_counter) FROM question_log WHERE project_id = project_id_param AND question_category_id = category_id_param GROUP BY sending_counter; $_$ LANGUAGE sql STRICT;

CREATE OR REPLACE FUNCTION random_question_by_proj_and_cat(IN project_id_param bigint, IN category_id_param bigint, OUT rnd_question_log question_log) RETURNS question_log
    AS $$
        SELECT * FROM question_log
            WHERE sending_counter = (SELECT min_question_log_sendings_by_proj_and_cat(project_id_param, category_id_param))
                  AND question_category_id = category_id_param
            OFFSET floor(random() * (SELECT COUNT(*) FROM question_log
                    WHERE sending_counter = (SELECT min_question_log_sendings_by_proj_and_cat(project_id_param, category_id_param))
                        AND question_category_id = category_id_param))
        LIMIT 1;
    $$ LANGUAGE sql STRICT;
